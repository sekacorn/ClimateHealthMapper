server:
  port: 8080
  shutdown: graceful
  http2:
    enabled: true

spring:
  application:
    name: api-gateway

  # Spring Cloud Gateway Configuration
  cloud:
    gateway:
      # Global filters
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 100
            redis-rate-limiter.burstCapacity: 200
            key-resolver: "#{@userKeyResolver}"

      # Global CORS configuration
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "http://localhost:3000,http://localhost:4200"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600

      # Discovery configuration (if using service discovery)
      discovery:
        locator:
          enabled: false
          lower-case-service-id: true

  # Redis Configuration (for rate limiting and caching)
  data:
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
        shutdown-timeout: 100ms

  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${OAUTH2_ISSUER_URI:}
          jwk-set-uri: ${OAUTH2_JWK_SET_URI:}

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:ClimateHealthMapper-SuperSecretKey-ChangeInProduction-2025}
  expiration: 86400000 # 24 hours in milliseconds
  require-mfa: ${JWT_REQUIRE_MFA:true}

# OAuth2 Configuration
oauth2:
  issuer-uri: ${OAUTH2_ISSUER_URI:}
  client-id: ${OAUTH2_CLIENT_ID:}
  client-secret: ${OAUTH2_CLIENT_SECRET:}

# CORS Configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:4200}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,PATCH,OPTIONS}

# Microservices URLs
services:
  integrator:
    url: ${INTEGRATOR_SERVICE_URL:http://localhost:8081}
  visualizer:
    url: ${VISUALIZER_SERVICE_URL:http://localhost:8082}
  session:
    url: ${SESSION_SERVICE_URL:http://localhost:8083}
  llm:
    url: ${LLM_SERVICE_URL:http://localhost:8084}
  collaboration:
    url: ${COLLABORATION_SERVICE_URL:http://localhost:8085}

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 2s
        eventConsumerBufferSize: 10
        recordExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
        ignoreExceptions:
          - com.climate.gateway.exception.BusinessException

    instances:
      integratorCircuitBreaker:
        baseConfig: default
      visualizerCircuitBreaker:
        baseConfig: default
      sessionCircuitBreaker:
        baseConfig: default
      llmCircuitBreaker:
        baseConfig: default
        slowCallDurationThreshold: 5s # LLM might take longer
      collaborationCircuitBreaker:
        baseConfig: default

  timelimiter:
    configs:
      default:
        timeoutDuration: 5s
        cancelRunningFuture: true

    instances:
      integratorCircuitBreaker:
        baseConfig: default
      visualizerCircuitBreaker:
        baseConfig: default
      sessionCircuitBreaker:
        baseConfig: default
      llmCircuitBreaker:
        timeoutDuration: 10s # LLM might take longer
      collaborationCircuitBreaker:
        baseConfig: default

  retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 100ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
        ignoreExceptions:
          - com.climate.gateway.exception.BusinessException

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
  tracing:
    sampling:
      probability: 0.1

# Logging Configuration
logging:
  level:
    root: INFO
    com.climate.gateway: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG
    io.github.resilience4j: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/api-gateway.log
    max-size: 10MB
    max-history: 30

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker

  data:
    redis:
      host: redis
      port: 6379

services:
  integrator:
    url: http://climate-integrator:8081
  visualizer:
    url: http://climate-visualizer:8082
  session:
    url: http://user-session:8083
  llm:
    url: http://llm-service:8084
  collaboration:
    url: http://collaboration-service:8085

logging:
  level:
    root: INFO
    com.climate.gateway: INFO
    org.springframework.cloud.gateway: INFO

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod

  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}
      ssl:
        enabled: true

cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:https://climatehealthmapper.com}

logging:
  level:
    root: WARN
    com.climate.gateway: INFO
    org.springframework.cloud.gateway: WARN
  file:
    name: /var/log/api-gateway/api-gateway.log

management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus
  endpoint:
    health:
      show-details: never

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev

logging:
  level:
    root: DEBUG
    com.climate.gateway: TRACE
    org.springframework.cloud.gateway: TRACE
    org.springframework.security: TRACE

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
