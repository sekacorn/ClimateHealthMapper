apiVersion: v1
kind: Service
metadata:
  name: ai-model
  namespace: climate-health
  labels:
    app: ai-model
spec:
  ports:
  - port: 8086
    targetPort: 8086
    name: http
  selector:
    app: ai-model
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-model
  namespace: climate-health
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-model
  template:
    metadata:
      labels:
        app: ai-model
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8086"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: ai-model
        image: climate-health/ai-model:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8086
          name: http
        env:
        - name: PORT
          value: "8086"
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: climate-health-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: climate-health-config
              key: LOG_LEVEL
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: climate-health-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: climate-health-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: climate-health-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: climate-health-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: climate-health-secrets
              key: POSTGRES_PASSWORD
        - name: MODEL_TYPE
          valueFrom:
            configMapKeyRef:
              name: climate-health-config
              key: MODEL_TYPE
        - name: MODEL_VERSION
          valueFrom:
            configMapKeyRef:
              name: climate-health-config
              key: MODEL_VERSION
        - name: BATCH_SIZE
          valueFrom:
            configMapKeyRef:
              name: climate-health-config
              key: BATCH_SIZE
        - name: MAX_SEQUENCE_LENGTH
          valueFrom:
            configMapKeyRef:
              name: climate-health-config
              key: MAX_SEQUENCE_LENGTH
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
          limits:
            memory: "8Gi"
            cpu: "4000m"
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /health
            port: 8086
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8086
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8086
          initialDelaySeconds: 0
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 10
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: ai-model-pvc
      nodeSelector:
        accelerator: nvidia-gpu
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ai-model-pvc
  namespace: climate-health
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 100Gi
