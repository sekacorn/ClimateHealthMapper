apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: climatehealthmapper
  labels:
    app: postgres
    tier: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres
  sessionAffinity: ClientIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: climatehealthmapper
  labels:
    app: postgres
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: climatehealthmapper
  labels:
    app: postgres
    tier: database
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true

      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent

        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP

        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: climatehealthmapper-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=en_US.utf8"

        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi

        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d

        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1

        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1

        startupProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1

      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: postgres-init
        configMap:
          name: postgres-init-scripts

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: climatehealthmapper
  labels:
    app: postgres
data:
  postgresql.conf: |
    # PostgreSQL Configuration for ClimateHealthMapper

    # Connection Settings
    listen_addresses = '*'
    max_connections = 200
    superuser_reserved_connections = 3

    # Memory Settings
    shared_buffers = 1GB
    effective_cache_size = 3GB
    work_mem = 16MB
    maintenance_work_mem = 256MB

    # WAL Settings
    wal_level = replica
    max_wal_size = 2GB
    min_wal_size = 1GB
    wal_buffers = 16MB

    # Checkpoint Settings
    checkpoint_completion_target = 0.9
    checkpoint_timeout = 10min

    # Query Planner
    random_page_cost = 1.1
    effective_io_concurrency = 200
    default_statistics_target = 100

    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_timezone = 'UTC'

    # Performance
    shared_preload_libraries = 'pg_stat_statements'
    track_activity_query_size = 2048
    pg_stat_statements.track = all

    # Security
    ssl = on
    ssl_cert_file = '/etc/ssl/certs/server.crt'
    ssl_key_file = '/etc/ssl/private/server.key'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: climatehealthmapper
  labels:
    app: postgres
data:
  01-init-database.sql: |
    -- Initialize ClimateHealthMapper Database

    -- Enable required extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "postgis";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";

    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS climate_data;
    CREATE SCHEMA IF NOT EXISTS health_data;
    CREATE SCHEMA IF NOT EXISTS user_data;
    CREATE SCHEMA IF NOT EXISTS collaboration;

    -- Grant permissions
    GRANT USAGE ON SCHEMA climate_data TO PUBLIC;
    GRANT USAGE ON SCHEMA health_data TO PUBLIC;
    GRANT USAGE ON SCHEMA user_data TO PUBLIC;
    GRANT USAGE ON SCHEMA collaboration TO PUBLIC;

    -- Create indexes for common queries
    -- Additional table creation will be handled by application migrations

  02-create-users.sql: |
    -- Create application users with limited privileges

    DO $$
    BEGIN
      IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'app_user') THEN
        CREATE USER app_user WITH PASSWORD 'changeme';
      END IF;

      IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'readonly_user') THEN
        CREATE USER readonly_user WITH PASSWORD 'changeme';
      END IF;
    END
    $$;

    -- Grant privileges
    GRANT CONNECT ON DATABASE climatehealthmapper TO app_user;
    GRANT USAGE ON SCHEMA climate_data, health_data, user_data, collaboration TO app_user;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA climate_data TO app_user;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA health_data TO app_user;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA user_data TO app_user;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA collaboration TO app_user;

    GRANT CONNECT ON DATABASE climatehealthmapper TO readonly_user;
    GRANT USAGE ON SCHEMA climate_data, health_data TO readonly_user;
    GRANT SELECT ON ALL TABLES IN SCHEMA climate_data TO readonly_user;
    GRANT SELECT ON ALL TABLES IN SCHEMA health_data TO readonly_user;

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-pdb
  namespace: climatehealthmapper
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: postgres
