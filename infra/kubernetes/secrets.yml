# IMPORTANT: This is a template file. DO NOT commit actual secrets to version control.
# Use Kubernetes secrets management or external secret managers (HashiCorp Vault, AWS Secrets Manager, etc.)
#
# To create secrets from this template:
# 1. Copy this file: cp secrets.yml secrets.local.yml
# 2. Add secrets.local.yml to .gitignore
# 3. Replace all <BASE64_ENCODED_VALUE> with actual base64 encoded values
# 4. Apply: kubectl apply -f secrets.local.yml
#
# To encode values: echo -n "your-secret-value" | base64

apiVersion: v1
kind: Secret
metadata:
  name: climatehealthmapper-secrets
  namespace: climatehealthmapper
  labels:
    app: climatehealthmapper
type: Opaque
data:
  # Database Credentials
  # Example: echo -n "postgres" | base64
  POSTGRES_USER: <BASE64_ENCODED_VALUE>
  POSTGRES_PASSWORD: <BASE64_ENCODED_VALUE>

  # Redis Password
  REDIS_PASSWORD: <BASE64_ENCODED_VALUE>

  # JWT Secret for authentication
  # Generate: openssl rand -base64 32 | base64
  JWT_SECRET: <BASE64_ENCODED_VALUE>
  JWT_REFRESH_SECRET: <BASE64_ENCODED_VALUE>

  # API Keys
  OPENWEATHER_API_KEY: <BASE64_ENCODED_VALUE>
  NASA_API_KEY: <BASE64_ENCODED_VALUE>
  WHO_API_KEY: <BASE64_ENCODED_VALUE>
  OPENAI_API_KEY: <BASE64_ENCODED_VALUE>

  # External Service Credentials
  AWS_ACCESS_KEY_ID: <BASE64_ENCODED_VALUE>
  AWS_SECRET_ACCESS_KEY: <BASE64_ENCODED_VALUE>

  # Encryption Keys
  # Generate: openssl rand -base64 32 | base64
  DATA_ENCRYPTION_KEY: <BASE64_ENCODED_VALUE>

  # OAuth Credentials (if using OAuth)
  OAUTH_CLIENT_ID: <BASE64_ENCODED_VALUE>
  OAUTH_CLIENT_SECRET: <BASE64_ENCODED_VALUE>

  # SMTP Credentials (for email notifications)
  SMTP_USERNAME: <BASE64_ENCODED_VALUE>
  SMTP_PASSWORD: <BASE64_ENCODED_VALUE>
  SMTP_HOST: <BASE64_ENCODED_VALUE>
  SMTP_PORT: <BASE64_ENCODED_VALUE>

  # Sentry DSN (for error tracking)
  SENTRY_DSN: <BASE64_ENCODED_VALUE>

  # Session Secret
  SESSION_SECRET: <BASE64_ENCODED_VALUE>

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: climatehealthmapper
  labels:
    app: postgres
type: Opaque
data:
  username: <BASE64_ENCODED_VALUE>
  password: <BASE64_ENCODED_VALUE>

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-credentials
  namespace: climatehealthmapper
  labels:
    app: redis
type: Opaque
data:
  password: <BASE64_ENCODED_VALUE>

---
# TLS Certificate Secret (for SSL/TLS)
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificate
  namespace: climatehealthmapper
  labels:
    app: climatehealthmapper
type: kubernetes.io/tls
data:
  tls.crt: <BASE64_ENCODED_CERTIFICATE>
  tls.key: <BASE64_ENCODED_PRIVATE_KEY>

---
# Docker Registry Secret (for pulling private images)
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: climatehealthmapper
  labels:
    app: climatehealthmapper
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: <BASE64_ENCODED_DOCKER_CONFIG>

---
# Example script to generate secrets
# Save as generate-secrets.sh and run: chmod +x generate-secrets.sh && ./generate-secrets.sh
#
# #!/bin/bash
#
# echo "Generating Kubernetes secrets for ClimateHealthMapper..."
#
# # Generate random secrets
# POSTGRES_PASSWORD=$(openssl rand -base64 32)
# REDIS_PASSWORD=$(openssl rand -base64 32)
# JWT_SECRET=$(openssl rand -base64 32)
# JWT_REFRESH_SECRET=$(openssl rand -base64 32)
# DATA_ENCRYPTION_KEY=$(openssl rand -base64 32)
# SESSION_SECRET=$(openssl rand -base64 32)
#
# # Create secrets file
# cat > secrets.local.yml << EOF
# apiVersion: v1
# kind: Secret
# metadata:
#   name: climatehealthmapper-secrets
#   namespace: climatehealthmapper
# type: Opaque
# data:
#   POSTGRES_USER: $(echo -n "postgres" | base64)
#   POSTGRES_PASSWORD: $(echo -n "$POSTGRES_PASSWORD" | base64)
#   REDIS_PASSWORD: $(echo -n "$REDIS_PASSWORD" | base64)
#   JWT_SECRET: $(echo -n "$JWT_SECRET" | base64)
#   JWT_REFRESH_SECRET: $(echo -n "$JWT_REFRESH_SECRET" | base64)
#   DATA_ENCRYPTION_KEY: $(echo -n "$DATA_ENCRYPTION_KEY" | base64)
#   SESSION_SECRET: $(echo -n "$SESSION_SECRET" | base64)
#   # Add your API keys here
#   OPENWEATHER_API_KEY: $(echo -n "YOUR_OPENWEATHER_API_KEY" | base64)
#   NASA_API_KEY: $(echo -n "YOUR_NASA_API_KEY" | base64)
#   WHO_API_KEY: $(echo -n "YOUR_WHO_API_KEY" | base64)
#   OPENAI_API_KEY: $(echo -n "YOUR_OPENAI_API_KEY" | base64)
# EOF
#
# echo "Secrets file created: secrets.local.yml"
# echo "Please update API keys and apply: kubectl apply -f secrets.local.yml"
